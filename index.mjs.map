{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {NonNegativeInteger} [options.init] - number of data points used to compute initial statistics\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n*\n* var options = {\n*     'alpha': 0.05,\n*     'alernative': 'two-sided',\n*     'init': 100\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be on the interval [0,1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'init' ) ) {\n\t\topts.init = options.init;\n\t\tif ( !isNonNegativeInteger( opts.init ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'init', opts.init ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar incrminmax = require( '@stdlib/stats-incr-minmax' );\nvar incrmeanstdev = require( '@stdlib/stats-incr-meanstdev' );\nvar copy = require( '@stdlib/utils-copy' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-read-only-accessor' );\nvar max = require( '@stdlib/math-base-special-max' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar tQuantile = require( '@stdlib/stats-base-dists-t-quantile' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs Grubbs' test for detecting outliers.\n*\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis ('two-sided', 'min', 'max')\n* @param {NonNegativeInteger} [options.init=100] - number of data points used to compute initial statistics\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `alpha` option must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var rnorm = require( '@stdlib/random-base-normal' );\n*\n* var accumulator;\n* var opts;\n* var res;\n* var i;\n*\n* opts = {\n*     'init': 100\n* };\n*\n* accumulator = incrgrubbs( opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\nfunction incrgrubbs() {\n\tvar meanstdev;\n\tvar results;\n\tvar minmax;\n\tvar opts;\n\tvar err;\n\tvar mm;\n\tvar ms;\n\tvar gc;\n\tvar df;\n\tvar N;\n\tvar G;\n\n\topts = copy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Initialize the results object:\n\tresults = {};\n\tsetReadOnlyAccessor( results, 'rejected', getRejected );\n\tsetReadOnly( results, 'alpha', opts.alpha );\n\tsetReadOnlyAccessor( results, 'criticalValue', getCriticalValue );\n\tsetReadOnlyAccessor( results, 'statistic', getStatistic );\n\tsetReadOnlyAccessor( results, 'df', getDOF );\n\tsetReadOnlyAccessor( results, 'mean', getMean );\n\tsetReadOnlyAccessor( results, 'sd', getStDev );\n\tsetReadOnlyAccessor( results, 'min', getMin );\n\tsetReadOnlyAccessor( results, 'max', getMax );\n\tsetReadOnly( results, 'alt', opts.alternative );\n\tsetReadOnly( results, 'method', 'Grubbs\\' Test' );\n\tsetReadOnly( results, 'print', print );\n\n\tN = 0;\n\tdf = 0;\n\tG = 0.0;\n\tgc = 0.0;\n\n\t// Initialize statistics accumulators:\n\tmm = [ 0.0, 0.0 ];\n\tminmax = incrminmax( mm );\n\n\tms = [ 0.0, 0.0 ];\n\tmeanstdev = incrmeanstdev( ms );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated Grubbs' test results. If not provided a value, the accumulator function returns the current Grubbs' test results.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(Object|null)} test results or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar sig;\n\t\tvar md;\n\t\tvar tc;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tN += 1;\n\n\t\t// Update model statistics:\n\t\tmeanstdev( x );\n\t\tminmax( x );\n\n\t\t// Compute the degrees of freedom:\n\t\tdf = N - 2;\n\n\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Compute the test statistic and significance level...\n\t\tif ( opts.alternative === 'min' ) {\n\t\t\tG = ( ms[0]-mm[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else if ( opts.alternative === 'max' ) {\n\t\t\tG = ( mm[1]-ms[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else { // two-sided\n\t\t\tmd = max( ms[0]-mm[0], mm[1]-ms[0] ); // maximum absolute deviation\n\t\t\tG = md / ms[ 1 ];\n\t\t\tsig = opts.alpha / (2*N);\n\t\t}\n\t\t// Compute the critical values:\n\t\ttc = tQuantile( 1.0-sig, df );\n\t\tgc = (N-1)*tc / sqrt( N*(df+(tc*tc)) );\n\n\t\treturn results;\n\t}\n\n\t/**\n\t* Returns a `boolean` indicating whether the null hypothesis should be rejected.\n\t*\n\t* @private\n\t* @returns {boolean} boolean indicating whether the null hypothesis should be rejected\n\t*/\n\tfunction getRejected() {\n\t\treturn ( G > gc );\n\t}\n\n\t/**\n\t* Returns the critical value.\n\t*\n\t* @private\n\t* @returns {number} critical value\n\t*/\n\tfunction getCriticalValue() {\n\t\treturn gc;\n\t}\n\n\t/**\n\t* Returns the test statistic.\n\t*\n\t* @private\n\t* @returns {number} test statistic\n\t*/\n\tfunction getStatistic() {\n\t\treturn G;\n\t}\n\n\t/**\n\t* Returns the degrees of freedom (DOF).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} degrees of freedom\n\t*/\n\tfunction getDOF() {\n\t\treturn df;\n\t}\n\n\t/**\n\t* Returns the sample mean.\n\t*\n\t* @private\n\t* @returns {number} sample mean\n\t*/\n\tfunction getMean() {\n\t\treturn ms[ 0 ];\n\t}\n\n\t/**\n\t* Returns the corrected sample standard deviation.\n\t*\n\t* @private\n\t* @returns {number} corrected sample standard deviation\n\t*/\n\tfunction getStDev() {\n\t\treturn ms[ 1 ];\n\t}\n\n\t/**\n\t* Returns the sample minimum.\n\t*\n\t* @private\n\t* @returns {number} sample minimum\n\t*/\n\tfunction getMin() {\n\t\treturn mm[ 0 ];\n\t}\n\n\t/**\n\t* Returns the sample maximum.\n\t*\n\t* @private\n\t* @returns {number} sample maximum\n\t*/\n\tfunction getMax() {\n\t\treturn mm[ 1 ];\n\t}\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Object} [options] - options object\n\t* @param {PositiveInteger} [options.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [options.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted output\n\t*/\n\tfunction print( options ) {\n\t\tvar decision;\n\t\tvar digits;\n\t\tvar str;\n\n\t\tdigits = opts.digits;\n\t\tdecision = opts.decision;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( options.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', options.digits ) );\n\t\t\t\t}\n\t\t\t\tdigits = options.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( options.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', options.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = options.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Alternative hypothesis: ';\n\t\tif ( opts.alternative === 'max' ) {\n\t\t\tstr += 'The maximum value (' + mm[ 1 ] + ') is an outlier';\n\t\t} else if ( opts.alternative === 'min' ) {\n\t\t\tstr += 'The minimum value (' + mm[ 0 ] + ') is an outlier';\n\t\t} else { // two-sided\n\t\t\tstr += 'The ';\n\t\t\tif ( ms[0]-mm[0] > mm[1]-ms[0] ) {\n\t\t\t\tstr += 'minimum value (' + mm[ 0 ] + ')';\n\t\t\t} else {\n\t\t\t\tstr += 'maximum value (' + mm[ 1 ] + ')';\n\t\t\t}\n\t\t\tstr += ' is an outlier';\n\t\t}\n\t\tstr += '\\n\\n';\n\t\tstr += '    criticalValue: ' + roundn( gc, -digits ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( G, -digits ) + '\\n';\n\t\tstr += '    df: ' + df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( G > gc ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrgrubbs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Grubbs' test for outliers.\n*\n* @module @stdlib/stats-incr-grubbs\n*\n* @example\n* var rnorm = require( '@stdlib/random-base-normal' );\n* var incrgrubbs = require( '@stdlib/stats-incr-grubbs' );\n*\n* var accumulator;\n* var opts;\n* var res;\n* var i;\n*\n* opts = {\n*     'init': 100\n* };\n*\n* accumulator = incrgrubbs( opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],"names":["hasOwnProp","require$$0","isObject","require$$1","isNumber","require$$2","isPrimitive","isString","require$$3","isNonNegativeInteger","require$$4","format","require$$5","isnan","require$$6","validate_1","opts","options","TypeError","alpha","RangeError","alternative","init","isPositiveInteger","isBoolean","incrminmax","incrmeanstdev","copy","setReadOnly","require$$7","setReadOnlyAccessor","require$$8","max","require$$9","sqrt","require$$10","roundn","require$$11","tQuantile","require$$12","require$$13","validate","require$$14","defaults","require$$15","main","meanstdev","results","minmax","err","mm","ms","gc","df","N","G","arguments","length","getRejected","getCriticalValue","getStatistic","getDOF","getMean","getStDev","getMin","getMax","print","accumulator","x","sig","md","tc","decision","digits","str","method","lib"],"mappings":"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"}