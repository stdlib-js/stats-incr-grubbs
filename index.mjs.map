{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js","../lib/defaults.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport isnan from '@stdlib/assert-is-nan';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {NonNegativeInteger} [options.init] - number of data points used to compute initial statistics\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n*\n* var options = {\n*     'alpha': 0.05,\n*     'alernative': 'two-sided',\n*     'init': 100\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '1HN2V,FD', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '1HN8P,GU', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( '1HN8V,Gb', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( '1HN2W,Gh', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'init' ) ) {\n\t\topts.init = options.init;\n\t\tif ( !isNonNegativeInteger( opts.init ) ) {\n\t\t\treturn new TypeError( format( '1HN2t,G9', 'init', opts.init ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport incrminmax from '@stdlib/stats-incr-minmax';\nimport incrmeanstdev from '@stdlib/stats-incr-meanstdev';\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-read-only-accessor';\nimport max from '@stdlib/math-base-special-max';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport tQuantile from '@stdlib/stats-base-dists-t-quantile';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport defaults from './defaults.js';\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs Grubbs' test for detecting outliers.\n*\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis ('two-sided', 'min', 'max')\n* @param {NonNegativeInteger} [options.init=100] - number of data points used to compute initial statistics\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `alpha` option must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* import rnorm from '@stdlib/random-base-normal';\n*\n* var accumulator;\n* var opts;\n* var res;\n* var i;\n*\n* opts = {\n*     'init': 100\n* };\n*\n* accumulator = incrgrubbs( opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\nfunction incrgrubbs() {\n\tvar meanstdev;\n\tvar results;\n\tvar minmax;\n\tvar opts;\n\tvar err;\n\tvar mm;\n\tvar ms;\n\tvar gc;\n\tvar df;\n\tvar N;\n\tvar G;\n\n\topts = defaults();\n\tif ( arguments.length ) {\n\t\terr = validate( opts, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Initialize the results object:\n\tresults = {};\n\tsetReadOnlyAccessor( results, 'rejected', getRejected );\n\tsetReadOnly( results, 'alpha', opts.alpha );\n\tsetReadOnlyAccessor( results, 'criticalValue', getCriticalValue );\n\tsetReadOnlyAccessor( results, 'statistic', getStatistic );\n\tsetReadOnlyAccessor( results, 'df', getDOF );\n\tsetReadOnlyAccessor( results, 'mean', getMean );\n\tsetReadOnlyAccessor( results, 'sd', getStDev );\n\tsetReadOnlyAccessor( results, 'min', getMin );\n\tsetReadOnlyAccessor( results, 'max', getMax );\n\tsetReadOnly( results, 'alt', opts.alternative );\n\tsetReadOnly( results, 'method', 'Grubbs\\' Test' );\n\tsetReadOnly( results, 'print', print );\n\n\tN = 0;\n\tdf = 0;\n\tG = 0.0;\n\tgc = 0.0;\n\n\t// Initialize statistics accumulators:\n\tmm = [ 0.0, 0.0 ];\n\tminmax = incrminmax( mm );\n\n\tms = [ 0.0, 0.0 ];\n\tmeanstdev = incrmeanstdev( ms );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated Grubbs' test results. If not provided a value, the accumulator function returns the current Grubbs' test results.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(Object|null)} test results or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar sig;\n\t\tvar md;\n\t\tvar tc;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tN += 1;\n\n\t\t// Update model statistics:\n\t\tmeanstdev( x );\n\t\tminmax( x );\n\n\t\t// Compute the degrees of freedom:\n\t\tdf = N - 2;\n\n\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Compute the test statistic and significance level...\n\t\tif ( opts.alternative === 'min' ) {\n\t\t\tG = ( ms[0]-mm[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else if ( opts.alternative === 'max' ) {\n\t\t\tG = ( mm[1]-ms[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else { // two-sided\n\t\t\tmd = max( ms[0]-mm[0], mm[1]-ms[0] ); // maximum absolute deviation\n\t\t\tG = md / ms[ 1 ];\n\t\t\tsig = opts.alpha / (2*N);\n\t\t}\n\t\t// Compute the critical values:\n\t\ttc = tQuantile( 1.0-sig, df );\n\t\tgc = (N-1)*tc / sqrt( N*(df+(tc*tc)) );\n\n\t\treturn results;\n\t}\n\n\t/**\n\t* Returns a `boolean` indicating whether the null hypothesis should be rejected.\n\t*\n\t* @private\n\t* @returns {boolean} boolean indicating whether the null hypothesis should be rejected\n\t*/\n\tfunction getRejected() {\n\t\treturn ( G > gc );\n\t}\n\n\t/**\n\t* Returns the critical value.\n\t*\n\t* @private\n\t* @returns {number} critical value\n\t*/\n\tfunction getCriticalValue() {\n\t\treturn gc;\n\t}\n\n\t/**\n\t* Returns the test statistic.\n\t*\n\t* @private\n\t* @returns {number} test statistic\n\t*/\n\tfunction getStatistic() {\n\t\treturn G;\n\t}\n\n\t/**\n\t* Returns the degrees of freedom (DOF).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} degrees of freedom\n\t*/\n\tfunction getDOF() {\n\t\treturn df;\n\t}\n\n\t/**\n\t* Returns the sample mean.\n\t*\n\t* @private\n\t* @returns {number} sample mean\n\t*/\n\tfunction getMean() {\n\t\treturn ms[ 0 ];\n\t}\n\n\t/**\n\t* Returns the corrected sample standard deviation.\n\t*\n\t* @private\n\t* @returns {number} corrected sample standard deviation\n\t*/\n\tfunction getStDev() {\n\t\treturn ms[ 1 ];\n\t}\n\n\t/**\n\t* Returns the sample minimum.\n\t*\n\t* @private\n\t* @returns {number} sample minimum\n\t*/\n\tfunction getMin() {\n\t\treturn mm[ 0 ];\n\t}\n\n\t/**\n\t* Returns the sample maximum.\n\t*\n\t* @private\n\t* @returns {number} sample maximum\n\t*/\n\tfunction getMax() {\n\t\treturn mm[ 1 ];\n\t}\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Object} [options] - options object\n\t* @param {PositiveInteger} [options.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [options.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted output\n\t*/\n\tfunction print( options ) {\n\t\tvar decision;\n\t\tvar digits;\n\t\tvar str;\n\n\t\tdigits = opts.digits;\n\t\tdecision = opts.decision;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( '1HN47,Gz', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( options.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1HN3P,Fv', 'digits', options.digits ) );\n\t\t\t\t}\n\t\t\t\tdigits = options.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( options.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1HN2o,GE', 'decision', options.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = options.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Alternative hypothesis: ';\n\t\tif ( opts.alternative === 'max' ) {\n\t\t\tstr += 'The maximum value (' + mm[ 1 ] + ') is an outlier';\n\t\t} else if ( opts.alternative === 'min' ) {\n\t\t\tstr += 'The minimum value (' + mm[ 0 ] + ') is an outlier';\n\t\t} else { // two-sided\n\t\t\tstr += 'The ';\n\t\t\tif ( ms[0]-mm[0] > mm[1]-ms[0] ) {\n\t\t\t\tstr += 'minimum value (' + mm[ 0 ] + ')';\n\t\t\t} else {\n\t\t\t\tstr += 'maximum value (' + mm[ 1 ] + ')';\n\t\t\t}\n\t\t\tstr += ' is an outlier';\n\t\t}\n\t\tstr += '\\n\\n';\n\t\tstr += '    criticalValue: ' + roundn( gc, -digits ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( G, -digits ) + '\\n';\n\t\tstr += '    df: ' + df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( G > gc ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default incrgrubbs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*\n* @example\n* var o = defaults();\n* // returns {...}\n*/\nfunction defaults() {\n\treturn {\n\t\t'init': 100,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided',\n\t\t'digits': 4,\n\t\t'decision': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n"],"names":["validate","opts","options","isObject","TypeError","format","hasOwnProp","alpha","isNumber","isnan","RangeError","alternative","isString","init","isNonNegativeInteger","incrgrubbs","meanstdev","results","minmax","err","mm","ms","gc","df","N","G","digits","decision","arguments","length","setReadOnlyAccessor","getRejected","setReadOnly","getCriticalValue","getStatistic","getDOF","getMean","getStDev","getMin","getMax","print","incrminmax","incrmeanstdev","accumulator","x","sig","md","tc","max","tQuantile","sqrt","str","isPositiveInteger","isBoolean","method","roundn"],"mappings":"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"}